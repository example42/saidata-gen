name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run unit tests with coverage
      run: |
        python -m pytest tests/ \
          -m "unit" \
          --cov=saidata_gen \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-branch \
          --cov-fail-under=80 \
          -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run integration tests
      run: |
        python -m pytest tests/ \
          -m "integration" \
          --tb=short \
          -v
    
    - name: Run end-to-end workflow tests
      run: |
        python -m pytest tests/test_integration_workflows.py \
          --tb=short \
          -v

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install psutil  # For memory monitoring
    
    - name: Run performance benchmarks
      run: |
        python -m pytest tests/test_performance_benchmarks.py \
          -m "slow" \
          --tb=short \
          -v \
          --durations=10
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance_results.json
      if: always()

  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run black code formatting check
      run: |
        python -m black --check saidata_gen tests
    
    - name: Run isort import sorting check
      run: |
        python -m isort --check-only saidata_gen tests
    
    - name: Run mypy type checking
      run: |
        python -m mypy saidata_gen
      continue-on-error: true  # Allow mypy to fail for now
    
    - name: Run ruff linting
      run: |
        python -m ruff check saidata_gen tests
      continue-on-error: true  # Allow ruff to fail for now

  comprehensive-test:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, quality-checks]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run comprehensive test suite
      run: |
        python tests/run_comprehensive_tests.py \
          --no-quality \
          --quiet
    
    - name: Generate test report
      run: |
        python -c "
        import json
        import os
        
        # Create a simple test report
        report = {
          'workflow': 'comprehensive-test',
          'status': 'completed',
          'python_version': '3.10',
          'runner': 'ubuntu-latest'
        }
        
        with open('test_summary.json', 'w') as f:
          json.dump(report, f, indent=2)
        "
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test_report.md
          test_summary.json
          htmlcov/
      if: always()

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install safety bandit
    
    - name: Run safety check for known vulnerabilities
      run: |
        safety check
      continue-on-error: true
    
    - name: Run bandit security linter
      run: |
        bandit -r saidata_gen -f json -o bandit_report.json
      continue-on-error: true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-results
        path: bandit_report.json
      if: always()

  test-matrix:
    name: Test Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10"]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run core tests
      run: |
        python -m pytest tests/test_interfaces_comprehensive.py \
          tests/test_coverage_comprehensive.py \
          -v \
          --tb=short
    
    - name: Test YAML serialization on different platforms
      run: |
        python -c "
        from saidata_gen.core.models import EnhancedSaidataMetadata
        import tempfile
        import os
        
        # Test cross-platform YAML operations
        metadata = EnhancedSaidataMetadata(
            version='0.1',
            description='Cross-platform test',
            platforms=['linux', 'macos', 'windows']
        )
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.yaml', delete=False) as f:
            metadata.to_yaml_file(f.name)
            
            # Load back
            loaded = EnhancedSaidataMetadata.from_yaml_file(f.name)
            assert loaded.version == metadata.version
            assert loaded.description == metadata.description
            
            os.unlink(f.name)
        
        print('Cross-platform YAML test passed')
        "

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, quality-checks, comprehensive-test]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.comprehensive-test.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
        echo "Unit tests: ${{ needs.unit-tests.result }}"
        echo "Integration tests: ${{ needs.integration-tests.result }}"
        echo "Quality checks: ${{ needs.quality-checks.result }}"
        echo "Comprehensive test: ${{ needs.comprehensive-test.result }}"
    
    - name: Notify failure
      if: ${{ needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.comprehensive-test.result == 'failure' }}
      run: |
        echo "❌ Some tests failed!"
        echo "Unit tests: ${{ needs.unit-tests.result }}"
        echo "Integration tests: ${{ needs.integration-tests.result }}"
        echo "Quality checks: ${{ needs.quality-checks.result }}"
        echo "Comprehensive test: ${{ needs.comprehensive-test.result }}"
        exit 1